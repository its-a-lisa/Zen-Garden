// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q9SbVKdQNQqS8hT1VyyZBb
// Component: _CfVDfaSobmD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemesValue, useThemes } from "./PlasmicGlobalVariant__Themes"; // plasmic-import: Vhu4RsGekfQO/globalVariant
import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: puWqx6uCamo0/globalVariant
import { useScreenVariants as useScreenVariantszrrp3ZIhU07E } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Zrrp3ZIhU07e/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_zen.module.css"; // plasmic-import: q9SbVKdQNQqS8hT1VyyZBb/projectcss
import sty from "./PlasmicColors.module.css"; // plasmic-import: _CfVDfaSobmD/css

createPlasmicElementProxy;

export type PlasmicColors__VariantMembers = {};
export type PlasmicColors__VariantsArgs = {};
type VariantPropType = keyof PlasmicColors__VariantsArgs;
export const PlasmicColors__VariantProps = new Array<VariantPropType>();

export type PlasmicColors__ArgsType = {};
type ArgPropType = keyof PlasmicColors__ArgsType;
export const PlasmicColors__ArgProps = new Array<ArgPropType>();

export type PlasmicColors__OverridesType = {
  root?: Flex__<"div">;
  base?: Flex__<"div">;
  bg?: Flex__<"div">;
  bg3?: Flex__<"div">;
  fg?: Flex__<"div">;
  bg2?: Flex__<"div">;
  bg4?: Flex__<"div">;
  fg2?: Flex__<"div">;
  success?: Flex__<"div">;
  error?: Flex__<"div">;
  warning?: Flex__<"div">;
  info?: Flex__<"div">;
};

export interface DefaultColorsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicColors__RenderFunc(props: {
  variants: PlasmicColors__VariantsArgs;
  args: PlasmicColors__ArgsType;
  overrides: PlasmicColors__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    themes: useThemes(),
    mode: useMode(),
    screen: useScreenVariantszrrp3ZIhU07E()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),
              [projectcss.global_themes_light]: hasVariant(
                globalVariants,
                "themes",
                "light"
              ),
              [sty.rootglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),
              [sty.rootglobal_themes_dark]: hasVariant(
                globalVariants,
                "themes",
                "dark"
              ),
              [sty.rootglobal_themes_light]: hasVariant(
                globalVariants,
                "themes",
                "light"
              )
            }
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vdRor)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__juVpb)}>
              <div className={classNames(projectcss.all, sty.freeBox__qJxo)}>
                <div
                  data-plasmic-name={"base"}
                  data-plasmic-override={overrides.base}
                  className={classNames(projectcss.all, sty.base)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fwmv2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gXFlJ
                      )}
                    >
                      {"semantic.color.base.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uDUyr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__anFzo
                      )}
                    >
                      {"semantic.color.base.disabled"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kcuDw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jkz9Z
                      )}
                    >
                      {"semantic.color.base.emphasis"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n3Fj1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r3ZLk
                      )}
                    >
                      {"semantic.color.base.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__genuM, {
                      [sty.freeBoxglobal_themes_light__genuMnIeJr]: hasVariant(
                        globalVariants,
                        "themes",
                        "light"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__erNyV
                      )}
                    >
                      {"semantic.color.base.subtle"}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__cjiY3)}>
                <div
                  data-plasmic-name={"bg"}
                  data-plasmic-override={overrides.bg}
                  className={classNames(projectcss.all, sty.bg, {
                    [sty.bgglobal_themes_light]: hasVariant(
                      globalVariants,
                      "themes",
                      "light"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e0LHs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___14TGw
                      )}
                    >
                      {"semantic.color.bg.canvas"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ktWmx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__egld4
                      )}
                    >
                      {"semantic.color.bg.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__i9STw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qqLe
                      )}
                    >
                      {"semantic.color.bg.overlay"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gpmU2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vPsm8
                      )}
                    >
                      {"semantic.color.bg.subtle"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gbpPv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nekTd
                      )}
                    >
                      {"semantic.color.bg.surface"}
                    </div>
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "themes", "light") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"bg3"}
                    data-plasmic-override={overrides.bg3}
                    className={classNames(projectcss.all, sty.bg3, {
                      [sty.bg3global_themes_light]: hasVariant(
                        globalVariants,
                        "themes",
                        "light"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0XUie
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bQgQ8
                        )}
                      >
                        {"semantic.color.bg.canvas"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qePLq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hh2B6
                        )}
                      >
                        {"semantic.color.bg.muted"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lrfe)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fN4Jy
                        )}
                      >
                        {"semantic.color.bg.overlay"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1Nuat
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qAql4
                        )}
                      >
                        {"semantic.color.bg.subtle"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5T3Un
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rHk0B
                        )}
                      >
                        {"semantic.color.bg.surface"}
                      </div>
                    </div>
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"fg"}
                  data-plasmic-override={overrides.fg}
                  className={classNames(projectcss.all, sty.fg)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9TlOw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qk7D
                      )}
                    >
                      {"semantic.color.fg.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xPvvm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5WjBo
                      )}
                    >
                      {"semantic.color.fg.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tsQhy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Kt9L
                      )}
                    >
                      {"semantic.color.fg.on-accent"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pn4YZ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__swewu
                      )}
                    >
                      {"semantic.color.fg.on-disabled"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sFau0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kBrEr
                      )}
                    >
                      {"semantic.color.fg.subtle"}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sVttc)}>
                <div
                  data-plasmic-name={"bg2"}
                  data-plasmic-override={overrides.bg2}
                  className={classNames(projectcss.all, sty.bg2, {
                    [sty.bg2global_themes_light]: hasVariant(
                      globalVariants,
                      "themes",
                      "light"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ftyRj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f3AJh
                      )}
                    >
                      {"semantic.color.subtle"}
                    </div>
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "themes", "light") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"bg4"}
                    data-plasmic-override={overrides.bg4}
                    className={classNames(projectcss.all, sty.bg4, {
                      [sty.bg4global_themes_light]: hasVariant(
                        globalVariants,
                        "themes",
                        "light"
                      )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nY9Ok)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0LtJr
                        )}
                      >
                        {"semantic.color.bg.canvas"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gk9Ls)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eBif1
                        )}
                      >
                        {"semantic.color.bg.muted"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yexTr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x2Zj7
                        )}
                      >
                        {"semantic.color.bg.overlay"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1Stdb
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Ghts
                        )}
                      >
                        {"semantic.color.bg.subtle"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dOBg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hYdLz
                        )}
                      >
                        {"semantic.color.bg.surface"}
                      </div>
                    </div>
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"fg2"}
                  data-plasmic-override={overrides.fg2}
                  className={classNames(projectcss.all, sty.fg2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__glskq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jiFzr
                      )}
                    >
                      {"semantic.color.emphasis"}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lZixb)}>
                <div
                  data-plasmic-name={"success"}
                  data-plasmic-override={overrides.success}
                  className={classNames(projectcss.all, sty.success)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bHp2Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xejid
                      )}
                    >
                      {"semantic.color.success.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__srw0Q)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nefIx
                      )}
                    >
                      {"semantic.color.success.emphasis"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6MxvV)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uEpbM
                      )}
                    >
                      {"semantic.color.success.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vXuue)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yOs3M
                      )}
                    >
                      {"semantic.color.success.on-success"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fFnb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uQeMt
                      )}
                    >
                      {"semantic.color.success.subtle"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"error"}
                  data-plasmic-override={overrides.error}
                  className={classNames(projectcss.all, sty.error)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eJmBy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ha5Ce
                      )}
                    >
                      {"semantic.color.error.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uRi5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Zvrr
                      )}
                    >
                      {"semantic.color.error.emphasis"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lopCl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zjatu
                      )}
                    >
                      {"semantic.color.error.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ap5T)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p2930
                      )}
                    >
                      {"semantic.color.error.on-error"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__w72Pe)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___59Wmg
                      )}
                    >
                      {"semantic.color.error.subtle"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"warning"}
                  data-plasmic-override={overrides.warning}
                  className={classNames(projectcss.all, sty.warning)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p8Cwd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lK41L
                      )}
                    >
                      {"semantic.color.warning.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7GWCs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__md9UC
                      )}
                    >
                      {"semantic.color.warning.emphasis"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xZmgj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x2L3S
                      )}
                    >
                      {"semantic.color.warning.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__huhry)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jq5Md
                      )}
                    >
                      {"semantic.color.warning.on-warning"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hf6Yx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__axOzm
                      )}
                    >
                      {"semantic.color.warning.subtle"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"info"}
                  data-plasmic-override={overrides.info}
                  className={classNames(projectcss.all, sty.info)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__na2Uz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ke0E3
                      )}
                    >
                      {"semantic.color.info.default"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fwzvy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hOWgB
                      )}
                    >
                      {"semantic.color.info.emphasis"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lcxIg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xQsyw
                      )}
                    >
                      {"semantic.color.info.muted"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mu2P8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i8EhG
                      )}
                    >
                      {"semantic.color.info.on-info"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Qv8F)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c1PUk
                      )}
                    >
                      {"semantic.color.info.subtle"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "base",
    "bg",
    "bg3",
    "fg",
    "bg2",
    "bg4",
    "fg2",
    "success",
    "error",
    "warning",
    "info"
  ],
  base: ["base"],
  bg: ["bg"],
  bg3: ["bg3"],
  fg: ["fg"],
  bg2: ["bg2"],
  bg4: ["bg4"],
  fg2: ["fg2"],
  success: ["success"],
  error: ["error"],
  warning: ["warning"],
  info: ["info"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  base: "div";
  bg: "div";
  bg3: "div";
  fg: "div";
  bg2: "div";
  bg4: "div";
  fg2: "div";
  success: "div";
  error: "div";
  warning: "div";
  info: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicColors__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicColors__VariantsArgs;
    args?: PlasmicColors__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicColors__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicColors__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicColors__ArgProps,
          internalVariantPropNames: PlasmicColors__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicColors__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicColors";
  } else {
    func.displayName = `PlasmicColors.${nodeName}`;
  }
  return func;
}

export const PlasmicColors = Object.assign(
  // Top-level PlasmicColors renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    base: makeNodeComponent("base"),
    bg: makeNodeComponent("bg"),
    bg3: makeNodeComponent("bg3"),
    fg: makeNodeComponent("fg"),
    bg2: makeNodeComponent("bg2"),
    bg4: makeNodeComponent("bg4"),
    fg2: makeNodeComponent("fg2"),
    success: makeNodeComponent("success"),
    error: makeNodeComponent("error"),
    warning: makeNodeComponent("warning"),
    info: makeNodeComponent("info"),

    // Metadata about props expected for PlasmicColors
    internalVariantProps: PlasmicColors__VariantProps,
    internalArgProps: PlasmicColors__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicColors;
/* prettier-ignore-end */
