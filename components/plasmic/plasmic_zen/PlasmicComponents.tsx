// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q9SbVKdQNQqS8hT1VyyZBb
// Component: Uz-OcZH-uOJs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: OJZsrgmKJ9be/component
import Divider from "../../Divider"; // plasmic-import: TyG3O8ijsb8q/component
import ListItem from "../../ListItem"; // plasmic-import: I7yFMkZVVUds/component
import Logo from "../../Logo"; // plasmic-import: JoqA83dN2H-V/component
import Logomark from "../../Logomark"; // plasmic-import: td1UH1xT-FX0/component
import MenuBarItem from "../../MenuBarItem"; // plasmic-import: Q6q8kGf4oMGg/component
import Placeholder from "../../Placeholder"; // plasmic-import: ssqz9LAlTjE8/component
import Toggle from "../../Toggle"; // plasmic-import: DAdhKH9ef4Qh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_zen.module.css"; // plasmic-import: q9SbVKdQNQqS8hT1VyyZBb/projectcss
import sty from "./PlasmicComponents.module.css"; // plasmic-import: Uz-OcZH-uOJs/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BdzWazlxBX2U/icon
import IconrightArrowIcon from "./icons/PlasmicIcon__IconrightArrow"; // plasmic-import: caGCl0DxjBy9/icon
import LogoiconOnlyIcon from "./icons/PlasmicIcon__LogoiconOnly"; // plasmic-import: f-X_MCNxficR/icon
import LogoiconTextSinglelineIcon from "./icons/PlasmicIcon__LogoiconTextSingleline"; // plasmic-import: U4mlIA00Js3I/icon
import LogoiconTextMultilineIcon from "./icons/PlasmicIcon__LogoiconTextMultiline"; // plasmic-import: ZN57_np0aamI/icon

createPlasmicElementProxy;

export type PlasmicComponents__VariantMembers = {};
export type PlasmicComponents__VariantsArgs = {};
type VariantPropType = keyof PlasmicComponents__VariantsArgs;
export const PlasmicComponents__VariantProps = new Array<VariantPropType>();

export type PlasmicComponents__ArgsType = {};
type ArgPropType = keyof PlasmicComponents__ArgsType;
export const PlasmicComponents__ArgProps = new Array<ArgPropType>();

export type PlasmicComponents__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  divider?: Flex__<typeof Divider>;
  listItem?: Flex__<typeof ListItem>;
  svg?: Flex__<"svg">;
  logo?: Flex__<typeof Logo>;
  logomark?: Flex__<typeof Logomark>;
  menuBarItem?: Flex__<typeof MenuBarItem>;
  placeholder?: Flex__<typeof Placeholder>;
  toggle?: Flex__<typeof Toggle>;
};

export interface DefaultComponentsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponents__RenderFunc(props: {
  variants: PlasmicComponents__VariantsArgs;
  args: PlasmicComponents__ArgsType;
  overrides: PlasmicComponents__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "listItem.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "toggle.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
          />

          <Divider
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            className={classNames("__wab_instance", sty.divider)}
          />

          <ListItem
            data-plasmic-name={"listItem"}
            data-plasmic-override={overrides.listItem}
            className={classNames("__wab_instance", sty.listItem)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["listItem", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            startIcon={
              <ChecksvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
            value={generateStateValueProp($state, ["listItem", "value"]) ?? ""}
          />

          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
          />

          <Logomark
            data-plasmic-name={"logomark"}
            data-plasmic-override={overrides.logomark}
            className={classNames("__wab_instance", sty.logomark)}
          />

          <MenuBarItem
            data-plasmic-name={"menuBarItem"}
            data-plasmic-override={overrides.menuBarItem}
            className={classNames("__wab_instance", sty.menuBarItem)}
          />

          <Placeholder
            data-plasmic-name={"placeholder"}
            data-plasmic-override={overrides.placeholder}
            className={classNames("__wab_instance", sty.placeholder)}
          />

          <Toggle
            data-plasmic-name={"toggle"}
            data-plasmic-override={overrides.toggle}
            className={classNames("__wab_instance", sty.toggle)}
            isChecked={
              generateStateValueProp($state, ["toggle", "isChecked"]) ?? false
            }
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["toggle", "isChecked"])(
                eventArgs[0]
              );
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "divider",
    "listItem",
    "svg",
    "logo",
    "logomark",
    "menuBarItem",
    "placeholder",
    "toggle"
  ],
  button: ["button"],
  divider: ["divider"],
  listItem: ["listItem", "svg"],
  svg: ["svg"],
  logo: ["logo"],
  logomark: ["logomark"],
  menuBarItem: ["menuBarItem"],
  placeholder: ["placeholder"],
  toggle: ["toggle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  divider: typeof Divider;
  listItem: typeof ListItem;
  svg: "svg";
  logo: typeof Logo;
  logomark: typeof Logomark;
  menuBarItem: typeof MenuBarItem;
  placeholder: typeof Placeholder;
  toggle: typeof Toggle;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponents__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponents__VariantsArgs;
    args?: PlasmicComponents__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComponents__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComponents__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponents__ArgProps,
          internalVariantPropNames: PlasmicComponents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponents";
  } else {
    func.displayName = `PlasmicComponents.${nodeName}`;
  }
  return func;
}

export const PlasmicComponents = Object.assign(
  // Top-level PlasmicComponents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    divider: makeNodeComponent("divider"),
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),
    logo: makeNodeComponent("logo"),
    logomark: makeNodeComponent("logomark"),
    menuBarItem: makeNodeComponent("menuBarItem"),
    placeholder: makeNodeComponent("placeholder"),
    toggle: makeNodeComponent("toggle"),

    // Metadata about props expected for PlasmicComponents
    internalVariantProps: PlasmicComponents__VariantProps,
    internalArgProps: PlasmicComponents__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicComponents;
/* prettier-ignore-end */
